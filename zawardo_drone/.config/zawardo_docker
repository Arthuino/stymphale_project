# syntax=docker/dockerfile:1
FROM ros:humble-ros-base AS main-setup

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install --no-install-recommends -y \
    lsb-release \
    sudo \
    wget \
    software-properties-common \
    build-essential  \
    ccache \
    g++ \
    gdb \
    gawk \
    git \
    make \
    cmake \
    ninja-build \
    libtool \
    libxml2-dev \
    libxml2-utils \
    libxslt1-dev \
    python3-numpy \
    python3-pyparsing \
    python3-serial \
    python-is-python3 \
    libpython3-stdlib \
    libtool-bin \
    zip \
    default-jre \
    socat \
    ros-dev-tools \
    ros-humble-launch-pytest \
    && apt-get clean \
    && apt-get -y autoremove \
    && apt-get autoclean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# TAKEN from https://github.com/docker-library/python/blob/a58630aef106c8efd710011c6a2a0a1d551319a0/3.11/bullseye/Dockerfile
# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION=23.1.2
# https://github.com/docker-library/python/issues/365
ENV PYTHON_SETUPTOOLS_VERSION=65.5.1
# https://github.com/pypa/get-pip
ENV PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/9af82b715db434abb94a0a6f3569f43e72157346/public/get-pip.py
ENV PYTHON_GET_PIP_SHA256=45a2bb8bf2bb5eff16fdd00faef6f29731831c7c59bd9fc2bf1f3bed511ff1fe

RUN set -eux; \
\
wget -O get-pip.py "$PYTHON_GET_PIP_URL"; \
echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum -c -; \
\
export PYTHONDONTWRITEBYTECODE=1; \
\
python get-pip.py \
    --disable-pip-version-check \
    --no-cache-dir \
    --no-compile \
    "pip==$PYTHON_PIP_VERSION" \
    "setuptools==$PYTHON_SETUPTOOLS_VERSION" \
; \
rm -f get-pip.py; \
\
pip --version

RUN python -m pip install --no-cache-dir -U future lxml pexpect flake8 empy==3.3.4 pyelftools tabulate pymavlink pre-commit junitparser

FROM eclipse-temurin:19-jdk-jammy AS dds-gen-builder

RUN apt-get update && apt-get install --no-install-recommends -y \
git \
&& apt-get clean \
&& apt-get -y autoremove \
&& apt-get autoclean \
&& rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN git clone -b master --recurse-submodules https://github.com/ArduPilot/Micro-XRCE-DDS-Gen.git --depth 1 --no-single-branch --branch master dds-gen \
&& cd dds-gen \
&& ./gradlew assemble

FROM main-setup AS arm-dds-setup

WORKDIR /dds-gen
COPY --from=dds-gen-builder /dds-gen/scripts scripts/
COPY --from=dds-gen-builder /dds-gen/share share/
WORKDIR /

# Get STM32 GCC10 toolchain
ARG ARM_ROOT="gcc-arm-none-eabi-10"
ARG ARM_ROOT_EXT="-2020-q4-major"
ARG ARM_TARBALL="$ARM_ROOT$ARM_ROOT_EXT-x86_64-linux.tar.bz2"
ARG ARM_TARBALL_URL="https://firmware.ardupilot.org/Tools/STM32-tools/$ARM_TARBALL"

# ---- ARM Toolchain ----
RUN cd /opt \
&& wget -qO- "$ARM_TARBALL_URL" | tar jx \
&& mv "/opt/$ARM_ROOT$ARM_ROOT_EXT" "/opt/$ARM_ROOT" \
&& rm -rf "/opt/$ARM_ROOT/share/doc"

# manual ccache setup for arm-none-eabi-g++/arm-none-eabi-gcc
RUN ln -s /usr/bin/ccache /usr/lib/ccache/arm-none-eabi-g++ \
&& ln -s /usr/bin/ccache /usr/lib/ccache/arm-none-eabi-gcc

# Set STM32 toolchain to the PATH
ENV PATH="/opt/$ARM_ROOT/bin:$PATH"

RUN mkdir -p $HOME/arm-gcc \
&& ln -s -f /opt/gcc-arm-none-eabi-10/ g++-10.2.1


ENV PATH="/dds-gen/scripts:$PATH"
# Set ccache to the PATH
ENV PATH="/usr/lib/ccache:$PATH"

# Gain some time by disabling mavnative
ENV DISABLE_MAVNATIVE=True

# Set the buildlogs directory into /tmp as other directory aren't accessible
ENV BUILDLOGS=/tmp/buildlogs

ENV TZ=UTC

ENV ROS_DISTRO=humble


FROM arm-dds-setup AS qgroundcontrol-setup
# ---- QGroundControl ----
# Download app image
RUN wget https://s3-us-west-2.amazonaws.com/qgroundcontrol/latest/QGroundControl.AppImage && \
    chmod +x QGroundControl.AppImage
# extract
RUN ./QGroundControl.AppImage --appimage-extract

FROM arm-dds-setup AS extended-arm-dds-setup
# ---- CUSTOM SETUP ----
SHELL ["/bin/bash", "-c"]

# Global export
RUN echo "export PATH=\$PATH:\$HOME/.local/bin" >> ~/.bashrc

# ---- User setup ----
RUN useradd -ms /bin/bash ardupilotuser && \
    echo "ardupilotuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers &&  \
    usermod -aG dialout ardupilotuser && \
    echo 'root:zawardo' | chpasswd

WORKDIR /home/ardupilotuser


FROM extended-arm-dds-setup AS ardupilot-setup
USER ardupilotuser
# ---- MAVProxy ----
RUN pip install -U MAVProxy

# ---- Ardupilot ----
# ROS2 workspace init
RUN mkdir -p ros2_ws/src
WORKDIR /home/ardupilotuser/ros2_ws
# Clone
RUN vcs import --input https://raw.githubusercontent.com/ArduPilot/ardupilot/master/Tools/ros2/ros2.repos --recursive src
# Update dependencies
RUN sudo apt-get update

RUN rosdep update && rosdep install --from-paths src --ignore-src -y
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

# Build
RUN . /opt/ros/humble/setup.bash \
    && colcon build --symlink-install --event-handlers console_cohesion+




FROM ardupilot-setup AS ardupilot-gz-setup
# ---- Gazabo Harmonic ----
# Install Tools
RUN sudo apt-get update && sudo apt-get install lsb-release gnupg curl -y
# Install
RUN sudo curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null


RUN sudo wget https://raw.githubusercontent.com/osrf/osrf-rosdep/master/gz/00-gazebo.list -O /etc/ros/rosdep/sources.list.d/00-gazebo.list

RUN sudo apt-get update && sudo apt-get install ros-humble-ros-gzharmonic -y


RUN rosdep update
ENV GZ_VERSION=harmonic
ENV ROS_DISTRO=humble
ENV ROS_PYTHON_VERSION=3

# ---- Ardupilot_GZ ----
# additional dependencies
RUN sudo apt-get update && sudo apt install -y \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libopencv-dev \
    openssh-client 
# Cloning
RUN vcs import --input https://raw.githubusercontent.com/ArduPilot/ardupilot_gz/main/ros2_gz.repos --recursive src
RUN git clone -b humble https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup
#RUN git clone git@github.com:ArduPilot/ardupilot_gz.git src/ardupilot_gz


# Update ROS dependencies (/!\ rosdep don't run as root)
RUN . /opt/ros/humble/setup.bash \
    && sudo apt update \
    && sudo apt upgrade -y \
    && rosdep update \
    && rosdep install --from-paths src --ignore-src -r -y

# Build micro ros setup
#RUN . /opt/ros/humble/setup.bash \
#    && . install/setup.bash \
#    && colcon build --symlink-install \
#                    --event-handlers console_cohesion+ console_direct+ \
#                    --packages-select micro_ros_setup

# Build execpt broken pkgs
RUN . /opt/ros/humble/setup.bash \
    && . install/setup.bash \
    && sudo apt update \
    && sudo apt upgrade -y \
    && rosdep update \
    && sudo rosdep install --rosdistro humble --from-paths src --ignore-src -r -y \
    && colcon build --symlink-install \
                    #--event-handlers console_cohesion+ console_direct+ \
                    --packages-skip ardupilot_gz_bringup \
                                    ros_gz_image \
                                    ros_ign_bridge \
                                    test_ros_gz_bridge \
                                    ros_gz_bridge \
                                    ros_gz_sim_demos \
                                    ros_ign_image \
                                    ros_gz \
                                    ros_ign_gazebo_demos \
                                    ros_ign

# Update ROS dependencies (/!\ rosdep don't run as root)
RUN . /opt/ros/humble/setup.bash \
    && sudo apt update \
    && rosdep update \
    && sudo rosdep install --from-paths src --ignore-src -r -y

ENV MAKEFLAGS="-j 1"

# Build ardupilot gz
RUN . /opt/ros/humble/setup.bash \
    && . install/setup.bash \
    && colcon build --symlink-install \
                    --parallel-workers=1 --executor sequential \
                    --event-handlers console_cohesion+ \
                    --packages-up-to ardupilot_gz_bringup

RUN sudo pip install -U MAVProxy

RUN cd .. && mkdir sitl_build && cd sitl_build && ../ros2_ws/src/ardupilot/Tools/autotest/sim_vehicle.py -v Copter

# debug : . .config/docker_build.sh ardupilot-gz-setup
#           colcon build --event-handlers console_cohesion+ --packages-skip ros_gz_bridge
# colcon build --symlink-install --event-handlers console_cohesion+ console_direct+ --packages-skip ros_gz_bridge
# colcon build --symlink-install --event-handlers console_cohesion+ console_direct+ --packages-select ros_gz_bridge

FROM extended-arm-dds-setup AS final-setup
# ###   FINAL SETUP ### #

# ---- Tools ----
RUN apt-get update && \
    apt-get install -y terminator \
                    nano \
                    iproute2 \
                    gedit \
                    vim \
    && apt-get upgrade -y
# STIL depedencies for modules
RUN pip install -U MAVProxy opencv-python matplotlib
# Install QGroundControl dependencies (gstreamer, pulseaudio), Qt dependencies (libxcb...) SITL modules depedencies
RUN apt-get update && apt-get install -y \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-gl \
    libpulse-mainloop-glib0 \
    libxkbcommon-x11-dev \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-render-util0 \
    libxcb-xinerama0 \
    libxcb-keysyms1 \
    libcanberra-gtk-module \
    libcanberra-gtk3-module


# SITL modules depedencie
RUN apt install python3-wxgtk4.0 -y --no-install-recommends
USER ardupilotuser

# ---- QGControl ----
COPY --chown=ardupilotuser --from=qgroundcontrol-setup /squashfs-root /qgroundcontrol
RUN echo "alias qgroundcontrol-start='bash /qgroundcontrol/qgroundcontrol-start.sh'" >> ~/.bashrc


# ---- Ardupilot ----
COPY --chown=ardupilotuser --from=ardupilot-gz-setup /home/ardupilotuser/ros2_ws /home/ardupilotuser/ros2_ws
RUN echo "source ~/ros2_ws/install/setup.bash" >> ~/.bashrc && \
    echo "export PATH=\$PATH:/home/ardupilotuser/ros2_ws/src/ardupilot/Tools/autotest/" >> ~/.bashrc
WORKDIR /home/ardupilotuser/ros2_ws

RUN rosdep update && rosdep install --from-paths src --ignore-src -r -y

# Install dependencies and gazebo
RUN sudo apt-get update && sudo apt-get install lsb-release gnupg curl -y \
    && sudo curl https://packages.osrfoundation.org/gazebo.gpg --output /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null \
    && sudo wget https://raw.githubusercontent.com/osrf/osrf-rosdep/master/gz/00-gazebo.list -O /etc/ros/rosdep/sources.list.d/00-gazebo.list


RUN sudo apt-get update && sudo apt install -y \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libopencv-dev \
    openssh-client \
    ros-humble-ros-gzharmonic 


