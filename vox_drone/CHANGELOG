# CHANGELOG

## 0.1.0

3D map of voxel in .voxelmap format (read and save) and voxelMap class
Can create random point cloud and voxelise it.
Can create voxel map from sin func to have approximation of a real map.

Can apply fft to map and store it in a fftMap class.
Can apply ifft to fftMap.
Can apply low pass filter to fftMap.

WIP:
Reduce memory size of fftMap by removing the blank part of the fft.
Reconstruct the full fftMap from the reduced one.

## 0.1.1

Conversion voxmap <-> fftMap operational.
Architecture of the code improved.

## 0.1.2

Launch from docker operational.
Error rate computation for maps

## 0.1.3

At this point, the ideal library for this project should be open3D. Considering the systematic segfaults of all open3D functions, I supposed that the library is not compatible with the docker image. None of the others libraries I tried satisfied my needs. So I will wait the futur C++ implementation to turn my self to libs. I will focus the python version on the proof of concept.

EDIT: I will keep PYvista for the visualization of the point cloud.

The 0.1.3 version will focus on evaluating tool of the runtime and memory usage and using a "use case" point cloud.

WIP:
OPtimize/subdivide voxelization.
